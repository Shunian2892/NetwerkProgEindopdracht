import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.Scanner;

public class MasterMind_EtienneCode.MasterMind_Client extends Application implements MasterMind_EtienneCode.MasterMindContestants {
    private String hostName;
    private int port;
    private boolean isConnected = true;
    private Socket socket;

    private boolean myTurn = false;
    private char myToken =' ';
    private char otherToken = ' ';
    private boolean waitingForPlayer = true;
    private boolean continuePlay = true;
    private String codeToBreak = "", tryingCode;

    private BorderPane borderPane = new BorderPane();
    private TextArea readMessagesArea = new TextArea();
    private TextField sendMessagesField = new TextField();
    private Button sendMessage = new Button();

    public MasterMind_EtienneCode.MasterMind_Client(String hostName, int port){
        this.hostName = hostName;
        this.port = port;
    }

    public static void main(String[] args) {
        MasterMind_EtienneCode.MasterMind_Client client = new MasterMind_EtienneCode.MasterMind_Client("localhost", 10000);
        client.connect();
//        launch(MasterMind_EtienneCode.MasterMind_Client.class);

    }

    private void connect() {
        System.out.println("Connecting to server: " + this.hostName);

//        Scanner scanner = new Scanner(System.in);

        try {
            socket = new Socket(this.hostName, this.port);

            DataInputStream in = new DataInputStream(socket.getInputStream());
            DataOutputStream out = new DataOutputStream(socket.getOutputStream());

            //Read in a name and display it in the chat
            readMessagesArea.appendText("Enter a nickname: ");
            String name = sendMessagesField.getText();
            sendMessage.setOnAction(event -> {
                readMessagesArea.appendText(name + " has connected to the server!");
            });

            new Thread(() -> {
                try {
                    int player = in.readInt();
                    if(player == PLAYER1){
                        Platform.runLater(() -> {
                            readMessagesArea.appendText("Waiting for player two");
                        });

                        sendMessage.setOnAction(event -> {
                            codeToBreak = sendMessagesField.getText();
                        });

                        //TODO implement code to make a code from the characters B, Y, G, R, P, O

                    } else if (player == PLAYER2){
                        if(codeToBreak.equals("")){
                            Platform.runLater(() ->{
                                readMessagesArea.appendText("Waiting on player one to make a code...");
                            });
                        }

                        if(!codeToBreak.equals("")){
                            //TODO implement code to guess the code with the characters B, Y, G, R, P, O
                            sendMessage.setOnAction(event -> {
                                tryingCode = sendMessagesField.getText();
                                readMessagesArea.appendText(tryingCode);
                            });
                        }
                    }

                    while(continuePlay){
                        if(player == PLAYER1){
                            //TODO maybe implement like tictactoe example?
                        }
                    }


                  /*  readMessagesArea.appendText("Enter a nickname: ");
                    String name = sendMessagesField.getText();
                    sendMessage.setOnAction(event -> {
                        readMessagesArea.appendText(name + " has connected to the server!");
                    });

//            System.out.println("Enter a nickname: ");
//            String name = scanner.nextLine();
//            out.writeUTF(name);
//            System.out.println(name + " has connected to the server!");

                    String input = "";

                    Thread readSocketThread = new Thread( () -> {
                        receiveDataFromSocket(in);
                    });

                    readSocketThread.start();

                    while(!input.equals("quit")){
                        input = scanner.nextLine();
                        out.writeUTF(input);
                    }

                    isConnected = false;
                    socket.close();

                    try {
                        readSocketThread.join();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }*/


                } catch (Exception e){
                    e.printStackTrace();
                }
            }).start();


        } catch (IOException e) {
            e.printStackTrace();
        }



    }

    private void receiveDataFromSocket(DataInputStream in) {
        String receiving = "";
        while(isConnected){
            try{
                receiving = in.readUTF();
                System.out.println(receiving);
            } catch (IOException e){
                System.out.println("Goodbye!");
            }
        }
    }

//    public void writeStringToSocket(Socket socket, String text) {
//
//        try {
//            socket.getOutputStream().write(text.getBytes());
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//    }

    @Override
    public void start(Stage primaryStage){
        HBox hBox = new HBox();
        hBox.setSpacing(10);
        hBox.getChildren().addAll(sendMessagesField, sendMessage);
        sendMessage = new Button("Send");
//        readMessagesArea = new TextArea("Welcome!");
//        sendMessagesField = new TextField("Type message...");

        borderPane.setCenter(readMessagesArea);
        borderPane.setBottom(hBox);

        Scene scene = new Scene(borderPane);
        primaryStage.setScene(scene);
        primaryStage.setTitle("MasterMind");
        primaryStage.show();

    }
}
